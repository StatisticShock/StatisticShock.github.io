<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>StatisticShock Index Server</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<header>StatisticShock.GitHub.io Server</header>
	<div id="container">
		<aside>
			<div class="hb-container">
				<svg id="hb" class="hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10" stroke="#eee" stroke-width=".6" fill="rgba(0,0,0,0)" stroke-linecap="round" style="cursor: pointer">
					<path d="M2,3L5,3L8,3M2,5L8,5M2,7L5,7L8,7">
						<animate dur="0.2s" attributeName="d" values="M2,3L5,3L8,3M2,5L8,5M2,7L5,7L8,7;M3,3L5,5L7,3M5,5L5,5M3,7L5,5L7,7" fill="freeze" begin="start.begin" />
						<animate dur="0.2s" attributeName="d" values="M3,3L5,5L7,3M5,5L5,5M3,7L5,5L7,7;M2,3L5,3L8,3M2,5L8,5M2,7L5,7L8,7" fill="freeze" begin="reverse.begin" />
					</path>
					<rect width="10" height="10" stroke="none">
						<animate dur="2s" id="reverse" attributeName="width" begin="click" />
					</rect>
					<rect width="10" height="10" stroke="none">
						<animate dur="0.001s" id="start" attributeName="width" values="10;0" fill="freeze" begin="click" />
						<animate dur="0.001s" attributeName="width" values="0;10" fill="freeze" begin="reverse.begin" />
					</rect>
				</svg>
			</div>
			<div class="language-wrapper" style="display: none;">
				<p id="language">Language</p>
				<div>
					<input type="radio" id="languageChoice1" name="language" value="en-US" checked="true"/>
					<label for="languageChoice1">English (US)</label>
					<input type="radio" id="languageChoice2" name="language" value="pt-BR" />
					<label for="languageChoice2">Português (Brasil)</label>
				</div>
			</div>
			<ç let length = 1 ç>
			<ç typeOfEndpoints.forEach((type) => { ç>
				<ç length++; ç>
				<ç length += type.endpoints.length; ç>
			<ç }); ç>
			<nav style=<ç= '--child-count:' + (length * 1.65) + 'em;' ç>>
				<a href="#endpoints" style="color: var(--clr-primary-a0); text-decoration: none; margin: 3em 0;">ENDPOINTS</a>
				<div>
					<ç typeOfEndpoints.forEach(function (type) { ç>
						<ç if (type.endpoints.length === 0) {} else { ç>
							<a href=<ç= '#' + type.method.toLowerCase() ç> style="color: var(--clr-primary-a0); text-decoration: none;"><ç= type.method ç></a>
							<ul>
								<ç type.endpoints.forEach(function (endpoint) { ç>
									<ç const shortcut = '/' + endpoint.route.split('/')[1] + '/' ç>
									<li><a href=<ç= '#' + type.method.toLowerCase() + '-' + endpoint.id ç>><ç= shortcut ç></a></li>
								<ç }); ç>
							</ul>
						<ç }; ç>
					<ç }); ç>
				</div>
			</nav>
		</aside>
		<div class="data-wrapper">
			<h1 id="endpoints" style="margin: 0 auto; text-align: center;">ENDPOINTS</h1>
			<p>This database is in a <span class="codeblock">Google Sheets</span> file.</p>
			<ç typeOfEndpoints.forEach(function (type) { ç>
				<ç if (type.endpoints.length === 0) {} else { ç>
					<h2 id=<ç= type.method.toLowerCase() ç>><ç= type.method ç></h2>
					<p><ç- type.description[0].split('\n').map((line) => '<p>' + line + '</p>').join('') ç></p>
					<ul>
						<ç type.endpoints.forEach(function (endpoint) { ç>
							<div class="endpoint-wrapper" id=<ç= type.method.toLowerCase() + '-' + endpoint.id ç>>
								<h3 class="route"><ç= endpoint.route ç></h1>
								<div class="description"><ç- endpoint.description[0].split('\n').map((text) => `<p>${text}</p>`).join('') ç></div>
								<ç if (endpoint.parameters) { ç>
									<div class="parameter">
										<ç endpoint.parameters.forEach((parameter) => { ç>
											<div class="parameter-name"><ç- parameter[0] ç></div>
											<div class="parameter-description"><ç- parameter[1].replaceAll('\n', '<br>') ç></div>
										<ç }); ç>
									</div>
								<ç } ç>
								<ç if (endpoint.examples) { ç>
									<div class="examples">
										<ç endpoint.examples.forEach((example) => { ç>
											<div class="example"><p><span pos="right">&gt;</span>&nbsp;<ç- example[0] ç></p></div>
											<div class="example-output"><ç- example[1].split('\n').map((line) => '<p>' + line.replaceAll('  ', '&nbsp;&nbsp;') + '</p>').join('') ç></div>
										<ç }); ç>
									</div>
								<ç }; ç>
							</div>
						<ç }) ç>
					</ul>
				<ç }; ç>
			<ç }); ç>
		</div>
	</div>
	<footer></footer>
	<script>
		(function getCheckedValue(groupName) {
			const radios = document.getElementsByName(groupName);

			for(const radio of radios) {
				if(radio.checked) {
					return radio.value;
				};
			};

			return null;
		})();

		(function changeLanguage () {
			const div = document.querySelector('.language-wrapper div');
			div.addEventListener('click', detectLanguageChange);

			function detectLanguageChange () {
				switch (getCheckedValue('language')) {
					case 'pt-BR':
						document.querySelector('p#language').innerHTML = 'Idioma';
					case 'en-US':
						document.querySelector('p#language').innerHTML = 'Language';
					default:
						document.querySelector('p#language').innerHTML = 'Language';
				}
			};
		})();

		(function toggleExamples () {
			const exampleHeaders = document.querySelectorAll('div.example');

			exampleHeaders.forEach((example) => {
				example.addEventListener('click', (ev) => {
					if (example.querySelector(':scope > p > span').getAttribute('pos') === 'right') {
						example.querySelector(':scope > p > span').setAttribute('pos', 'down');
					} else {
						example.querySelector(':scope > p > span').setAttribute('pos', 'right');
					};
				});
			});
		})();

		(async function putVersionOnFooter () {
			const version = await fetch(`/version`).then((res) => res.json());
			const footer = document.querySelector('footer');

			footer.innerHTML += `<p><small>ver. ${version.server}</small></p>`;
		})();

		(function collapseAside () {
			const aside = document.querySelector('aside');
			const hb = aside.querySelector('#hb');

			window.addEventListener('click' , (ev) => {
				console.log(ev);

				const target = ev.touches ? ev.touches[0].target : ev.target;
				
				if (hb.contains(target) || target === hb) {
					hb.classList.toggle('hidden');
				} else if (!(aside.contains(target)) && !(hb.classList.contains('hidden')) || target.tagName === 'A') {
					hb.querySelector('#reverse').beginElement();
					hb.classList.toggle('hidden');
				};
			});
		})();

		(function setAsideMinWidth () {
			const aside = document.querySelector('aside');
			const container = document.querySelector('div#container');
			const lis = container.querySelectorAll('ul li');

			let minWidth = 0;
			lis.forEach((li) => {
				minWidth = Math.max(minWidth, li.textContent.length);
			});

			aside.style.setProperty('--min-width', (minWidth / 1.25) + 'em');
		})();

		(function setExampleHeight () {
			const examples = document.querySelectorAll('.example-output');

			examples.forEach((example) => {
				const lines = Array.from(example.querySelectorAll('p')).length;

				example.style.setProperty('--example-height', 'calc(' + (lines * 1.125) + 'em + 3px)')
			})
		})();

		(function toggleLanguage () {
			const languageInputs = document.querySelectorAll('input[name="language"]');
			
			languageInputs.forEach((input) => {
				input.addEventListener('click', (ev) => {

				});
			});
		})();
	</script>
</body>
</html>